---
interface Option {
  value: string;
  label: string;
}

interface Props {
  label: string;
  name: string;
  placeholder?: string;
  options: Option[];
  width?: string | number;
  disabled?: boolean;
  required?: boolean;
  selectFirst?: boolean;
}

const {
  label,
  name,
  placeholder,
  options,
  width,
  disabled = false,
  required = false,
  selectFirst = false,
} = Astro.props;

const widthStyle = width ? (typeof width === 'number' ? `${width}px` : width) : 'width: 100%';
const selectedValue = selectFirst && options.length > 0 ? options[0].value : '';
---

<div class='input-select' style={`width: ${widthStyle};`}>
  <label for={name} class={`font-s2 input-select__label ${disabled ? 'input-select__label--disabled' : ''}`}>
    {label}
  </label>
  <div class='input-select__wrapper'>
    <select
      id={name}
      class='input-select__input'
      name={name}
      disabled={disabled}
      required={required}
      value={selectedValue}>
      {
        !selectFirst && (
          <option value='' disabled selected hidden>
            {placeholder}
          </option>
        )
      }
      {
        options.map((option, idx) => (
          <option value={option.value} selected={selectFirst && idx === 0}>
            {option.label}
          </option>
        ))
      }
    </select>
    <div class='input-select__arrow'></div>
  </div>
</div>

<style>
  .input-select {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-3);
  }

  .input-select__label {
    color: var(--primary-text);
    text-transform: capitalize;
    width: min-content;
    white-space: nowrap;
  }

  .input-select__label--disabled {
    color: var(--disabled-text);
  }

  .input-select__input {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    border: 1px solid var(--secondary-border);
    background-color: var(--primary-surface);
    border-radius: var(--radius-medium);
    color: var(--primary-text);
    outline: none;
    padding: var(--spacing-6);
    width: 100%;
    font-family: var(--font-p1-family);
    font-weight: var(--font-p1-weight);
    font-size: var(--font-p1-size);
    letter-spacing: var(--font-p1-letter-spacing);

    &:invalid {
      color: var(--disabled-text);
    }

    &:valid {
      border: 1px solid var(--primary-border);
    }

    &:hover {
      border: 1px solid var(--primary-border);
    }

    &:focus {
      border: 1px solid transparent;
      outline: var(--focus-outline) solid 2px;
    }

    &:focus:valid {
      border: 1px solid var(--primary-border);
    }

    &:disabled {
      background-color: var(--disabled-surface);
      border: 1px solid var(--minimal-border);
      color: var(--disabled-text);
      cursor: not-allowed;
    }
  }

  .input-select__wrapper {
    position: relative;
    width: 100%;
  }

  .input-select__arrow {
    border-bottom: 2px solid var(--primary-text);
    border-left: 2px solid var(--primary-text);
    height: 0.6rem;
    pointer-events: none;
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%) rotate(-45deg);
    transition: transform 0.2s ease;
    width: 0.6rem;
  }

  .input-select__wrapper:focus-within .input-select__arrow {
    transform: translateY(-50%) rotate(135deg);
    transition: transform 0.2s ease;
  }

  .input-select__input:disabled + .input-select__arrow {
    border-color: var(--disabled-text);
  }
</style>
