---
interface Props {
  label: string;
  name: string;
  placeholder?: string;
  autoComplete?: string;
  width?: string | number;
  disabled?: boolean;
}

const { label, name, placeholder, autoComplete = 'off', width, disabled = false } = Astro.props;

const widthStyle = width ? (typeof width === 'number' ? `${width}px` : width) : '100%';
---

<div class='input-text' style={`width: ${widthStyle};`}>
  <label for={name} class={`font-s2 input-text__label ${disabled ? 'input-text__label--disabled' : ''}`}>
    {label}
  </label>
  <input
    id={name}
    type='text'
    name={name}
    placeholder={placeholder}
    class='input-text__input'
    autocomplete={autoComplete}
    disabled={disabled}
  />
</div>

<style>
  .input-text {
    display: flex;
    flex-direction: column;
    gap: 0.375rem;
  }

  .input-text__label {
    color: var(----primary-text);
    text-transform: capitalize;
  }

  .input-text__label--disabled {
    color: var(--disabled-text);
  }

  .input-text__input {
    border: 1px solid var(--secondary-border);
    background-color: var(--primary-surface);
    border-radius: var(--radius-medium);
    color: var(--primary-text);
    outline: none;
    padding: var(--spacing-6);
    width: 100%;

    &::placeholder {
      color: var(--disabled-text);
    }

    &:hover {
      border: 1px solid var(--primary-border);
    }

    &:focus {
      border: 1px solid transparent;
      outline: rgba(0, 56, 255, 0.4) solid 2px;
    }

    &:not(:focus):not(:placeholder-shown) {
      border: 2px solid var(--primary-border);
    }

    &:not(:placeholder-shown) {
      border: 1px solid var(--primary-border);
    }

    &:disabled {
      background-color: var(--disabled-surface);
      border: 1px solid var(----minimal-border);
      color: var(--disabled-text);
      cursor: not-allowed;
    }
  }
</style>
